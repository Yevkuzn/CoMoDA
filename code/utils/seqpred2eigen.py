# Author: Yevhen Kuznietsov
# Licensed under the CC BY-NC 4.0 license (https://creativecommons.org/licenses/by-nc/4.0/)


import os
import numpy as np
import sys

# in-sequence ids of frames used for evaluation
seq_frame_ids = [[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 69, 72, 75],
                 [0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 196, 212, 228, 244, 260, 276, 292, 308, 324, 340, 356, 372, 388],
                 [0, 5, 10, 20, 30, 35, 40, 45, 50, 60, 65, 70, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140],
                 [0, 3, 6, 9, 12, 15, 18, 21, 27, 33, 36, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 84],
                 [18, 36, 54, 72, 90, 108, 126, 144, 162, 180, 198, 216, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468],
                 [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 112, 119, 126, 133, 140, 147, 161, 168, 175, 182],
                 [0, 14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 268, 296, 310, 324, 338, 352, 366, 380, 394, 408],
                 [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 768, 800],
                 [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120],
                 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 26, 28, 30, 32, 36, 38, 40, 42, 44, 46, 48, 50, 52],
                 [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286],
                 [0, 14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 182, 196, 210, 224, 238, 274, 288, 302, 316, 330, 344, 358, 372],
                 [0, 22, 44, 66, 88, 110, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550],
                 [49, 62, 75, 88, 101, 114, 127, 140, 153, 179, 192, 205, 218, 231, 244, 257, 270, 283, 296, 309, 322, 335, 348, 361, 374],
                 [7, 34, 61, 88, 115, 142, 169, 196, 223, 250, 277, 304, 331, 358, 385, 412, 439, 466, 493, 520, 574, 601, 628, 655, 682],
                 [0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 305, 321, 337, 353, 369, 385, 401, 417],
                 [0, 19, 38, 57, 76, 95, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456],
                 [80, 114, 148, 182, 216, 284, 318, 352, 386, 420, 454, 488, 522, 556, 590, 624, 658, 692, 726, 760, 794, 828, 862, 896, 930],
                 [15, 35, 43, 51, 59, 67, 75, 83, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187, 195, 203, 211, 219],
                 [0, 26, 52, 78, 104, 130, 156, 182, 208, 234, 260, 286, 312, 338, 364, 390, 416, 442, 468, 494, 546, 572, 598, 624, 650],
                 [0, 3, 6, 9, 12, 18, 21, 24, 30, 33, 36, 39, 45, 48, 51, 54, 57, 60, 63, 72, 78, 81, 84, 87, 90],
                 [0, 36, 72, 108, 144, 180, 216, 252, 288, 324, 360, 396, 432, 468, 504, 540, 576, 612, 735, 771, 807, 879, 915, 951, 1054],
                 [0, 11, 22, 33, 44, 55, 66, 77, 88, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275],
                 [0, 107, 214, 428, 535, 642, 749, 856, 963, 1070, 1177, 1284, 1391, 1498, 1605, 1712, 1819, 1926, 2033, 2140, 2247, 2419, 2526, 2633, 2740],
                 [0, 41, 82, 123, 164, 205, 246, 287, 328, 369, 410, 451, 492, 533, 574, 615, 656, 753, 794, 835, 876, 917, 958, 1040, 1081],
                 [0, 181, 362, 543, 734, 915, 1096, 1277, 1458, 1639, 1820, 2001, 2363, 2544, 2725, 2906, 3087, 3268, 3449, 3630, 3811, 3992, 4173, 4354, 4535],
                 [0, 32, 64, 96, 128, 160, 192, 224, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800]]


perms = [18, 12, 23, 14,  6, 10, 21, 17, 19,  5,  4,  9,  8, 13,  2, 20, 22,
             15,  1,  3, 16, 24,  0, 11,  7, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
             42, 43, 44, 45, 46, 47, 48, 49, 68, 71, 66, 57, 67, 74, 70, 73, 51, 54, 62, 60, 61, 59, 50, 63, 65,
             55, 52, 53, 72, 56, 64, 69, 58, 82, 75, 86, 89, 78, 84, 80, 91, 93, 90, 96, 99, 94, 87, 97, 98, 77,
             88, 81, 85, 76, 79, 92, 95, 83, 100, 104, 114, 109, 101, 117, 102, 108, 118, 111, 106, 122, 110,
             120, 105, 116, 124, 119, 123, 103, 113, 121, 112, 107, 115, 142, 129, 135, 147, 149, 126, 131, 141, 145, 146, 138, 125, 139,
             127, 132, 128, 148, 136, 133, 140, 144, 134, 137, 130, 143, 153, 157, 158, 173, 164, 168, 163, 171, 165, 167, 162, 170, 160,
             159, 161, 154, 156, 169, 152, 174, 166, 155, 150, 151, 172, 175, 178, 184, 196, 176, 190, 177, 181, 198, 194, 199, 179, 197,
             191, 185, 192, 188, 195, 182, 180, 187, 183, 186, 189, 193, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
             213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
             238, 239, 240, 241, 242, 243, 244, 245, 246, 268, 269, 270, 264, 254, 260, 266, 248, 255, 257, 261, 271, 251,
             250, 265, 258, 249, 267, 253, 259, 256, 247, 262, 252, 263, 272, 280, 273, 296, 290, 284, 281, 291, 278, 286, 292, 283, 277,
             294, 285, 282, 289, 293, 279, 295, 274, 275, 288, 287, 276, 298, 306, 305, 309, 297, 321, 319, 303, 304, 318, 313, 308, 311,
             317, 320, 315, 302, 314, 312, 310, 301, 307, 299, 300, 316, 327, 330, 324, 326, 339, 334, 337, 329, 346, 343, 331, 342, 340,
             323, 344, 325, 338, 336, 333, 335, 332, 345, 328, 322, 341, 358, 365, 369, 367, 357, 368, 350, 360, 353, 359, 355, 351, 352,
             371, 364, 366, 349, 347, 370, 363, 362, 354, 356, 348, 361, 372, 377, 393, 384, 376, 391, 375, 373, 387, 396, 380, 378, 379,
             389, 392, 390, 374, 395, 394, 381, 386, 385, 383, 388, 382, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
             410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
             435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 471, 469, 452, 470, 457, 451, 458, 464, 463, 465, 461, 459, 453,
             468, 460, 455, 466, 447, 456, 449, 454, 467, 462, 450, 448, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
             485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 517, 506, 521, 507, 499, 500, 501, 502, 519, 512, 510, 516, 497,
             518, 505, 514, 504, 513, 509, 498, 515, 508, 503, 511, 520, 525, 535, 542, 534, 532, 527, 523, 522, 536, 528, 524, 533, 530,
             539, 526, 531, 543, 538, 546, 544, 537, 541, 540, 545, 529, 556, 550, 565, 563, 569, 564, 557, 547, 554, 559, 551, 570, 560,
             571, 561, 548, 562, 566, 568, 555, 552, 553, 567, 558, 549, 591, 573, 575, 585, 588, 584, 590, 589, 582, 587, 596, 572, 583,
             574, 592, 578, 586, 577, 595, 581, 579, 576, 594, 593, 580, 617, 597, 619, 603, 600, 610, 605, 613, 620, 616, 602, 606, 599,
             609, 608, 615, 601, 604, 618, 607, 598, 612, 614, 621, 611, 641, 645, 624, 635, 628, 625, 646, 634, 630, 633, 637, 627, 638,
             622, 643, 631, 640, 642, 629, 626, 636, 632, 639, 623, 644, 671, 664, 649, 654, 651, 661, 652, 655, 657, 665, 658, 668, 662,
             648, 663, 647, 667, 660, 659, 670, 669, 666, 653, 656, 650, 676, 679, 685, 672, 691, 681, 694, 692, 686, 674, 687, 680, 693,
             695, 677, 688, 689, 675, 690, 678, 684, 682, 683, 696, 673]


def seqpred2eigen(seq_file, seqpreds_path, save_path):
    """ Given the depth predictions for every sequence,
    generate the array of depth maps consistent with Eigen test set
    """

    # first - retrieve the required depth maps
    sorted_preds = []

    with open(seq_file, "r") as sf:
        seqs = [l[:-1] for l in sf.readlines()]

    for j in range(len(seqs)):
        seq = seqs[j]
        pred_path = os.path.join(seqpreds_path, seq + ".npz")
        pred_depths = np.load(pred_path, fix_imports=True, encoding='latin1', allow_pickle=True)["data"]

        for i in range(len(seq_frame_ids[j])):
            pred_depth = pred_depths[seq_frame_ids[j][i]]
            sorted_preds.append(pred_depth)

    # permute depth maps so that their order is the same as in Eigen test set
    eigen_preds = np.zeros((697, 192, 640), dtype=np.float32)

    sorted_iter = 0
    for pi in perms:
        eigen_preds[pi] = sorted_preds[sorted_iter]
        sorted_iter += 1

    np.savez_compressed(save_path, data=eigen_preds)


def main(argv):
    """args:
    seq_file - file with all sequence names
    seqpreds_path - path to a dir with the predictions for all sequences
    save_path - path to save Eigen-consistent depth maps
    """
    # check that the arguments are passed
    assert len(argv) == 3

    seqpred2eigen(argv[0], argv[1], argv[2])


if __name__ == "__main__":
    main(sys.argv[1:])


